/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "anddd7.github.com/buyer-controller/pkg/apis/anddd7/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BuyerLister helps list Buyers.
// All objects returned here must be treated as read-only.
type BuyerLister interface {
	// List lists all Buyers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Buyer, err error)
	// Buyers returns an object that can list and get Buyers.
	Buyers(namespace string) BuyerNamespaceLister
	BuyerListerExpansion
}

// buyerLister implements the BuyerLister interface.
type buyerLister struct {
	indexer cache.Indexer
}

// NewBuyerLister returns a new BuyerLister.
func NewBuyerLister(indexer cache.Indexer) BuyerLister {
	return &buyerLister{indexer: indexer}
}

// List lists all Buyers in the indexer.
func (s *buyerLister) List(selector labels.Selector) (ret []*v1beta1.Buyer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Buyer))
	})
	return ret, err
}

// Buyers returns an object that can list and get Buyers.
func (s *buyerLister) Buyers(namespace string) BuyerNamespaceLister {
	return buyerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BuyerNamespaceLister helps list and get Buyers.
// All objects returned here must be treated as read-only.
type BuyerNamespaceLister interface {
	// List lists all Buyers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Buyer, err error)
	// Get retrieves the Buyer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Buyer, error)
	BuyerNamespaceListerExpansion
}

// buyerNamespaceLister implements the BuyerNamespaceLister
// interface.
type buyerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Buyers in the indexer for a given namespace.
func (s buyerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Buyer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Buyer))
	})
	return ret, err
}

// Get retrieves the Buyer from the indexer for a given namespace and name.
func (s buyerNamespaceLister) Get(name string) (*v1beta1.Buyer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("buyer"), name)
	}
	return obj.(*v1beta1.Buyer), nil
}
